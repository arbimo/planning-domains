type Location;
type Car < Location with{
	variable Location at;
};
type Something with{
	variable Location at;
};
	
type Object < Something ;
instance Object tent;

type Hiker < Something with {
	predicate canWalk();
};
	
action walk(Hiker h,Location l1,Location l2){
	duration := 20;
	[all] h.at == l1 :-> l2;
	[all] h.canWalk == true :-> false;
};

action goInCar(Hiker h,Car c,Location l){
	duration := 1;
	[all] {
		h.at == l :-> c;
		c.at ==l;
	};
};

action goOutCar(Hiker h,Car c,Location l){
	duration := 1;
	[all] {
		h.at == c :-> l;
		c.at ==l;
	};
};

action driving(Hiker h,Car c,Location l1,Location l2){
	duration := 5;
	[all] {
		h.at == c;
		c.at == l1 :-> l2;
	};
};

action sleep(Hiker h,Object o,Location l){
	duration := 15;
	o == tent;
	[all] {
		h.at == l;
		o.at == l;
		h.canWalk == false :-> true;
	};	
};

action putInCar(Hiker h,Car c, Object o,Location l){
	duration := 1;
	[all] {
		h.at == l;
		c.at == l;	
		o.at == l :-> c;
	};		
};
action putOutCar(Hiker h,Car c, Object o,Location l){
	duration := 1;
	[all] {
		h.at == l;
		c.at == l;	
		o.at == c :-> l;
	};		
};
