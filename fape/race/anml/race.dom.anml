

type Area with {
  constant boolean isManipulationArea;
  constant PreArea pre_area;
  constant ManArea man_area;
};
type PlArea < Area;  // area to place objects
type ManArea < Area; // area from which the robot manipulates
type PreArea < Area; // area from which to access a manipulation area
type NavArea < Area; // other area where the robot can be 

// this would be useless with a primitive to check the type of a variable in ANML
forall(ManArea a) { a.isManipulationArea := true; };
forall((PlArea or PreArea or NavArea) b) { b.isManipulationArea := false; };

type Robot with {
  constant Arm left_arm;
  constant Arm right_arm;
  fluent Area loc;
  fluent TorsoPosture torso;

  // the robot is working on an exclusive task
  fluent boolean busy;
};
type Arm with {
  fluent ArmPosture posture;
  fluent boolean free;
  constant Robot owner;
};

type Object with {
  fluent (PlArea or Arm) loc;
};
type CoffeeJug < Object;
type MilkPot < Object;
type SugarPot < Object;

type ArmPosture;
instance ArmPosture ArmTuckedPosture, ArmUntuckedPosture, ArmUnnamedPosture, ArmToSidePosture, ArmCarryPosture;

type TorsoPosture;
instance TorsoPosture TorsoDownPosture, TorsoMiddlePosture, TorsoUpPosture;

// an object on 'pl' can be manipulated from 'man' and 'man' can be accessed from 'pre'
constant boolean connected(PlArea pl, ManArea man, PreArea pre);



/*** Primitive actions ***/

action move_base(Robot r, Area to) {
  motivated;
  end >= start+5000;
  constant Area from;
  [all] r.loc == from :-> to;
};

// only applicable between a manipulation area and its pre-area 
action move_base_blind(Robot r, Area to) {
  motivated;
  end >= start+4000;

  constant ManArea man;
  
  constant Area from;
  from in { man, man.pre_area };
  to in { man, man.pre_area };
  from != to;

  [all] r.loc == from :-> to;
};

action tuck_arms(Robot r, ArmPosture left_pos, ArmPosture right_pos) {
  motivated;
  left_pos in { ArmTuckedPosture, ArmUntuckedPosture };
  right_pos in { ArmTuckedPosture, ArmUntuckedPosture };
  end >= start +4000;
  constant ArmPosture rarm_ini_pos;
  constant ArmPosture larm_ini_pos;
  [all] r.left_arm.posture == larm_ini_pos :-> left_pos;
  [all] r.right_arm.posture == rarm_ini_pos :-> right_pos;
};

action move_torso(Robot r, TorsoPosture new) {
  motivated;
  end >= start +4000;
  constant TorsoPosture old;
  [all] r.torso == old :-> new;
};

action pick_up_object(Robot r, Arm arm, Object obj) {
  motivated;
  end >= start +4000;
  r == arm.owner;
  constant PlArea pl;
  constant ManArea man;
  connected(pl, man, man.pre_area);
  [all] obj.loc == pl :-> arm;
  [all] r.loc == man;
  [all] arm.free == true :-> false;
};

action place_object(Robot r, Arm arm, Object obj, PlArea pl) {
  motivated;
  r == arm.owner;
  end >= start +4000;
  constant ManArea man;
  connected(pl, man, man.pre_area);
  [start] arm.posture == ArmToSidePosture;
  [all] r.loc == man;
  [all] obj.loc == arm :-> pl;
  [all] arm.free == false :-> true;
};

action move_arm_to_side(Robot r, Arm arm) {
  motivated;
  arm.owner == r;
  end >= start +4000;
  constant ArmPosture old_posture;
  [all] arm.posture == old_posture :-> ArmToSidePosture;

  // at least one of left/right arms must be untucked at start
  constant Arm any_arm;
  any_arm in { r.left_arm, r.right_arm };
  [start] any_arm.posture != ArmTuckedPosture;
};

action move_arms_to_carryposture(Robot r) {
  motivated;
  end >= start +4000;
  constant ArmPosture prevLeft;
  constant ArmPosture prevRight;
  [all] r.left_arm.posture == prevLeft :-> ArmCarryPosture;
  [all] r.right_arm.posture == prevRight :-> ArmCarryPosture;
  [all] r.torso != TorsoDownPosture;
};

action observe_objects_on_area(Robot r, PlArea pl) {
  motivated;
  end >= start +4000;
  constant ManArea man;
  connected(pl, man, man.pre_area);
  [all] r.loc == man;
};



/**** High Level Actions ****/

action adapt_torso(Robot r, TorsoPosture pose) {
  motivated;
  :decomposition {
    [all] r.torso == pose;
  };
  :decomposition {
    [start] r.torso != pose;
    [all] move_torso(r, pose);
  };
};

action torso_assume_driving_pose(Robot r) {
  motivated;
  :decomposition { // both arms are free
    [all] r.left_arm.free == true;
    [all] r.right_arm.free == true;
    [all] adapt_torso(r, TorsoDownPosture);
  };
  :decomposition { // there is an occupied arm
    constant Arm arm;
    arm.owner == r;
    [all] arm.free == false;
    [all] adapt_torso(r, TorsoMiddlePosture);
  };
};

action adapt_arms(Robot r, ArmPosture pose) {
  motivated;
  :decomposition {
    [all] r.left_arm.posture == pose;
    [all] r.right_arm.posture == pose;
  };
  :decomposition { // we want arms to be tucked
    constant Arm arm;
    pose == ArmTuckedPosture;
    arm.owner == r;
    [start] arm.posture != ArmTuckedPosture;
    [all] tuck_arms(r, ArmTuckedPosture, ArmTuckedPosture);
  };
  :decomposition { // we want arms in carry posture
    pose == ArmCarryPosture;
    constant Arm arm;
    arm.owner == r;
    [start] arm.posture != ArmCarryPosture;
    [all] move_arms_to_carryposture(r);
  };
};

action arms_assume_driving_pose(Robot r) {
  motivated;
  :decomposition { // both arms are free
    [all] r.left_arm.free == true;
    [all] r.right_arm.free == true;
    [all] adapt_arms(r, ArmTuckedPosture);
  };
  :decomposition { // there is an occupied arm
    constant Arm arm;
    arm.owner == r;
    [all] arm.free == false;
    [all] adapt_arms(r, ArmCarryPosture);
  };
};


action drive_robot(Robot r, Area to) {
  motivated;
  :decomposition {
    [all] r.loc == to;
  };
  :decomposition { // not in manipulation area, assume driving pose and drive
    constant Area from;
    from != to;
    from.isManipulationArea == false;
    [start] r.loc == from;
    [all] contains ordered(
      unordered(
        torso_assume_driving_pose(r),
	arms_assume_driving_pose(r)),
      move_base(r,to));
  };
  :decomposition { // in manipulation area, first go to matchi pre-manip area
    constant ManArea from;
    from != to;
    from.isManipulationArea == true;
    [start] r.loc == from;
    [all] contains ordered(
      move_base_blind(r, from.pre_area),
      unordered(
        torso_assume_driving_pose(r),
	arms_assume_driving_pose(r)),
      move_base(r,to));
  };
};

action arm_to_side(Robot r, Arm arm) {
  motivated;
  arm.owner == r;
  :decomposition {
    [all] arm.posture == ArmToSidePosture;
  };
  :decomposition {
    [start] arm.posture != ArmToSidePosture;
    [all] move_arm_to_side(r, arm);
  };
};

action move_both_arms_to_side(Robot r) {
  motivated;
  :decomposition {
    [start] r.left_arm.posture == ArmTuckedPosture;
    [start] r.right_arm.posture == ArmTuckedPosture;
    [all] contains ordered(
      tuck_arms(r, ArmUntuckedPosture, ArmUntuckedPosture),
      unordered(
        arm_to_side(r, r.left_arm),
	arm_to_side(r, r.right_arm)));
  };
  :decomposition {
    constant Arm a;
    a in { r.right_arm, r.left_arm };
    [start] a.posture != ArmTuckedPosture;
    [all] contains ordered( // to stick to the original domain, should probably be unordered in practice
      arm_to_side(r, r.left_arm),
      arm_to_side(r, r.right_arm));
  };
};

action assume_manipulation_pose(Robot r, ManArea l) {
  motivated;
  :decomposition { // already in position
    [all] {
      r.left_arm.posture == ArmToSidePosture;
      r.right_arm.posture == ArmToSidePosture;
      r.loc == l;
    };
    [all] adapt_torso(r, TorsoUpPosture);
  };
  :decomposition { // at pre-area, assume pose and go to manipulation area
    [start] r.loc == l.pre_area;
    [all] contains ordered(
      unordered(
        adapt_torso(r, TorsoUpPosture),
	move_both_arms_to_side(r)),
      move_base_blind(r, l));
  };
  :decomposition { // go back to pre-area before assuming pose
    [start] r.loc == l;
    constant Arm any_arm;
    any_arm in { r.left_arm, r.right_arm };
    [start] any_arm.posture != ArmToSidePosture;

    [all] contains ordered(
      move_base_blind(r, l.pre_area),
      unordered(
        adapt_torso(r, TorsoUpPosture),
	move_both_arms_to_side(r)),
      move_base_blind(r, l));	
  };
};

action leave_manipulation_pose(Robot r, ManArea l) {
  motivated;
  :decomposition {
    [start] r.loc == l;
    [all] move_base_blind(r, l.pre_area);
  };
};


action get_object(Robot r, Object o) {
  motivated;

  constant ManArea man;
  constant PlArea pl;
  connected(pl, man, man.pre_area);
  [start] o.loc == pl;
  constant Arm arm;
  arm in { r.left_arm, r.right_arm };
  
  :decomposition {
    [start] r.loc == man.pre_area; // this is not checked in their version (because leading to much backtracking?)
    [all] contains ordered(
      assume_manipulation_pose(r, man),
      pick_up_object(r, arm, o));
  };
  :decomposition {
    [start] r.loc != man.pre_area;
    [all] contains ordered(
      drive_robot(r, man.pre_area),
      assume_manipulation_pose(r, man),
      pick_up_object(r, arm, o));
  };
};

action put_object(Robot r, Object o, PlArea pl) {
  motivated;
  constant ManArea man;
  connected(pl, man, man.pre_area);

  constant Area initialLoc;
  [start] r.loc == initialLoc;

  constant Arm arm;
  [start] o.loc == arm;
  
  :decomposition {
    initialLoc != man;
    initialLoc != man.pre_area;
    [all] ordered(
      drive_robot(r, man.pre_area),
      assume_manipulation_pose(r, man),
      place_object(r, arm, o, pl));
  };
  :decomposition {
    initialLoc == man.pre_area;
    [all] ordered(
      assume_manipulation_pose(r, man),
      place_object(r, arm, o, pl));
  };
  :decomposition {
    initialLoc == man;
    [all] place_object(r, arm, o, pl);
  };
};


// missing method to do nothing if there is nothing to do
action move_object(Robot r, Object o, PlArea area) {
  motivated;
  :decomposition {
    [all] ordered(
      get: get_object(r, o),
      put: put_object(r, o, area));

    // r cannot perform another get or put task concurrrently  
    [start(get),end(get)] r.busy == false :-> false;
    [start(put),end(put)] r.busy == false :-> false;
  };
};




/**  Environment shared by all problem instances */

instance Robot PR2;
instance Arm LEFT_ARM,RIGHT_ARM;
PR2.right_arm := RIGHT_ARM;
PR2.left_arm := LEFT_ARM;
RIGHT_ARM.owner := PR2;
LEFT_ARM.owner := PR2;
[start] PR2.busy := false;


instance CoffeeJug coffeeJug1;
instance MilkPot milkPot1;
instance SugarPot sugarPot1,sugarPot2;

instance NavArea floorAreaTamsRestaurant1;
instance PlArea placingAreaEastRightCounter1, placingAreaWestLeftTable1, placingAreaEastLeftTable1, placingAreaWestRightTable1, placingAreaEastRightTable1, placingAreaNorthLeftTable2, placingAreaNorthRightTable2, placingAreaSouthLeftTable2, placingAreaSouthRightTable2, placingAreaEastRightCounterOS1;
instance ManArea manipulationAreaEastCounter1, manipulationAreaNorthTable1, manipulationAreaSouthTable1, manipulationAreaEastTable2, manipulationAreaWestTable2, manipulationAreaEastCounterOS1;
instance PreArea preManipulationAreaEastCounter1, preManipulationAreaNorthTable1, preManipulationAreaSouthTable1, preManipulationAreaEastTable2, preManipulationAreaWestTable2, preManipulationAreaEastCounterOS1;

connected(placingAreaEastRightCounter1, manipulationAreaEastCounter1, preManipulationAreaEastCounter1) := true;
connected(placingAreaWestLeftTable1, manipulationAreaNorthTable1, preManipulationAreaNorthTable1) := true;
connected(placingAreaEastLeftTable1, manipulationAreaSouthTable1, preManipulationAreaSouthTable1) := true;
connected(placingAreaWestRightTable1, manipulationAreaSouthTable1, preManipulationAreaSouthTable1) := true;
connected(placingAreaEastRightTable1, manipulationAreaNorthTable1, preManipulationAreaNorthTable1) := true;
connected(placingAreaNorthLeftTable2, manipulationAreaEastTable2,  preManipulationAreaEastTable2) := true;
connected(placingAreaNorthRightTable2, manipulationAreaWestTable2, preManipulationAreaWestTable2) := true;
connected(placingAreaSouthLeftTable2, manipulationAreaWestTable2, preManipulationAreaWestTable2) := true;
connected(placingAreaSouthRightTable2, manipulationAreaEastTable2, preManipulationAreaEastTable2) := true;
connected(placingAreaEastRightCounterOS1, manipulationAreaEastCounterOS1, preManipulationAreaEastCounterOS1) := true;

// associate manipulation area to their pre-manipulation area
manipulationAreaEastCounter1.pre_area := preManipulationAreaEastCounter1;
manipulationAreaNorthTable1.pre_area := preManipulationAreaNorthTable1;
manipulationAreaSouthTable1.pre_area := preManipulationAreaSouthTable1;
manipulationAreaEastTable2.pre_area :=  preManipulationAreaEastTable2;
manipulationAreaWestTable2.pre_area := preManipulationAreaWestTable2;
manipulationAreaEastCounterOS1.pre_area := preManipulationAreaEastCounterOS1;

preManipulationAreaEastCounter1.man_area := manipulationAreaEastCounter1;
preManipulationAreaNorthTable1.man_area := manipulationAreaNorthTable1;
preManipulationAreaSouthTable1.man_area := manipulationAreaSouthTable1;
preManipulationAreaEastTable2.man_area := manipulationAreaEastTable2;
preManipulationAreaWestTable2.man_area := manipulationAreaWestTable2;
preManipulationAreaEastCounterOS1.man_area := manipulationAreaEastCounterOS1;